import core.attributes;

namespace std {
	[[core.c_ffi_name("xy_std_stream_dtor_t")]]
	using stream_dtor_t = fn (stream: stream_t*);

	[[core.c_ffi_name("xy_std_stream_read_t")]]
	using stream_read_t = fn (stream: stream_t*, size: usize, buffer: void*): usize;

	[[core.c_ffi_name("xy_std_stream_write_t")]]
	using stream_write_t = fn (stream: stream_t*, size: usize, buffer: const void*): usize;

	[[core.c_ffi_name("xy_std_stream_seek_mode_t")]]
	enum stream_seek_mode_t : u8 {
		[[core.c_ffi_name("XY_STREAM_SEEK_MODE_BEGIN")]]
		BEGIN = 0,
		[[core.c_ffi_name("XY_STREAM_SEEK_MODE_SET")]]
		SET,
		[[core.c_ffi_name("XY_STREAM_SEEK_MODE_END")]]
		END
	};

	[[core.c_ffi_name("xy_std_stream_close_t")]]
	using stream_close_t = fn (stream: stream_t*): bool;

	[[core.c_ffi_name("xy_std_stream_seek_t")]]
	using stream_seek_t = fn (stream: stream_t*, off: isize, mode: stream_seek_mode_t): bool;

	[[core.c_ffi_name("xy_std_stream_tell_t")]]
	using stream_tell_t = fn (stream: stream_t*): isize;

	[[core.c_ffi_name("xy_std_stream_ops_t")]]
	struct stream_ops_t {
		let {
			dtor: stream_dtor_t,
			read: stream_read_t,
			write: stream_write_t,
			close: stream_close_t,
			seek: stream_seek_t,
			tell: stream_tell_t
		}
	}

	[[core.c_ffi_name("xy_std_stream_t")]]
	struct stream_t {
		let {
			ops: stream_ops_t*
		}
		fn {
			fn defer() {
				if(this.ops.dtor) {
					this.ops.dtor(this);
				}
			}
			fn read(size: usize, buffer: void*): usize {
				@bugcheck(this.ops.read != nullptr, "The read operation is not implemented");
				return this.ops.read(this, size, buffer);
			}
			fn write(size: usize, buffer: const void*): usize {
				@bugcheck(this.ops.read != nullptr, "The write operation is not implemented");
				return this.ops.write(this, size, buffer);
			}
			fn close(): bool {
				@bugcheck(this.ops.close != nullptr, "The close operation is not implemented");
				return this.ops.close(this);
			}
			fn seek(off: isize, mode: stream_seek_mode_t): bool {
				@bugcheck(this.ops.read != nullptr, "The seek operation is not implemented");
				return this.ops.seek(this, off, mode);
			}
			fn tell(): isize {
				@bugcheck(this.ops.read != nullptr, "The tell operation is not implemented");
				return this.ops.tell(this);
			}
		}
	}
}
