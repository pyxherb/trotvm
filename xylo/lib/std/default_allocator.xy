import minstd.allocator;
import capi.malloc;
import capi.string;
import core.utils;

namespace std {
	[[core.c_ffi_name("xy_default_allocator_dtor")]]
	fn default_allocator_dtor(ptr: rcobj_t&) {
	}

	[[core.c_ffi_name("xy_default_allocator_alloc")]]
	fn default_allocator_alloc(size: usize, alignment: usize): void* {
		return capi.aligned_malloc(size, alignment);
	}

	[[core.c_ffi_name("xy_default_allocator_dealloc")]]
	fn default_allocator_dealloc(ptr: void*, size: usize, alignment: usize) {
		return capi.aligned_free(ptr);
	}

	[[core.c_ffi_name("xy_default_allocator_realloc")]]
	fn default_allocator_realloc(ptr: void*, old_size: usize, old_alignment: usize, size: usize, alignment: usize): void* {
		if ((old_alignment != 1) || (alignment != 1)) {
			let new_ptr: void* = default_allocator_alloc(size, alignment);
			if (new_ptr == nullptr) {
				return nullptr;
			}

			capi.memcpy(new_ptr, ptr, utils.align_to(old_size, old_alignment));
			if (old_alignment != 1) {
				capi.aligned_free(ptr);
			} else {
				capi.free(ptr);
			}
			return new_ptr;
		}

		return capi.realloc(ptr, size);
	}

	def init_default_allocator() : xy.allocator_t {
		return {
			.rcobj = {
				.ref_num = 0,
				.dtor = default_allocator_dtor
			}
			.alloc_callback = default_allocator_alloc,
			.dealloc_callback = default_allocator_dealloc,
			.realloc_callback = default_allocator_realloc
		};
	}

	let default_allocator : xy.allocator_t = init_default_allocator();
}
